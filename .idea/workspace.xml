<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="4df1d3dc-5866-4023-82f3-c36b7ec4ea2b" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="90">
              <caret line="6" selection-start-line="6" selection-end-line="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/csc344_microproject2/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="60">
              <caret line="4" column="21" selection-start-line="4" selection-start-column="21" selection-end-line="4" selection-end-column="21" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>nand x</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/csc344_microproject2/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="75" />
    <option name="y" value="34" />
    <option name="width" value="928" />
    <option name="height" value="1056" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="csc344_microproject2" type="b2602c69:ProjectViewProjectNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="csc344_microproject2" type="b2602c69:ProjectViewProjectNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="csc344_microproject2" type="b2602c69:ProjectViewProjectNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="csc344_microproject2" type="b2602c69:ProjectViewProjectNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="csc344_microproject2" type="b2602c69:ProjectViewProjectNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="csc344_microproject2" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1552234755185" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../csc344_mainproject3" />
    <property name="project.structure.last.edited" value="SDKs" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
  </component>
  <component name="ReplState" timestamp="1552234755184">{:repl-history {:ide [], :local [{:command &quot;(simplify '(false))&quot;, :offset 19, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) (filter false? a)\n        (= (count a) 1) (false? b)\n        (distinct? a) (distinct (flatten n))))))&quot;, :offset 298, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) (filter true? a)\n        (= (count a) 1) (false? b)\n        (distinct? a) (distinct (flatten n))))))&quot;, :offset 297, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) (reduce true? a)\n        (= (count a) 1) (false? b)\n        (distinct? a) (distinct (flatten n))))))&quot;, :offset 297, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) (some true? a)\n        (= (count a) 1) (false? b)\n        (distinct? a) (distinct (flatten n))))))&quot;, :offset 295, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) (some false? a)\n        (= (count a) 1) (false? b)\n        (distinct? a) (distinct (flatten n))))))&quot;, :offset 296, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) true\n        (= (count a) 1) (false? b)\n        (not= every? a) n))))&quot;, :offset 266, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) true\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)))))&quot;, :offset 277, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)))))&quot;, :offset 274, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)))))&quot;, :offset 276, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (some true? a) (remove true n)))))&quot;, :offset 315, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (some true? a) (remove true? n)))))&quot;, :offset 316, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (some true? a) (remove false? n)))))&quot;, :offset 317, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x y true))&quot;, :offset 27, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (contains? a true) (remove true? n)))))&quot;, :offset 320, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (contains? 'a true) (remove true? n)))))&quot;, :offset 321, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (contains? 'a true) (remove (map (true? n)))))))&quot;, :offset 329, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (contains? 'a true) (remove (map true? n))))))&quot;, :offset 327, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (not-every? false? a) (remove (map true? n))))))&quot;, :offset 329, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not= every? a) (distinct n)\n        (not-every? false? a) (filter (map true? n))))))&quot;, :offset 329, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n       ;; (not= every? a) (distinct n)\n        (not-every? false? a) (filter (map true? n))))))&quot;, :offset 331, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n       ;; (not= every? a) (distinct n)\n        (not-every? false? a) (remove (map true? n))))))&quot;, :offset 331, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n       ;; (not= every? a) (distinct n)\n        (not-every? false? a) (remove true? n)))))&quot;, :offset 325, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (= every? a) (distinct n)\n        (not-every? false? a) (remove true? n)))))&quot;, :offset 320, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (= every? a) (filter distinct? n)\n        (not-every? false? a) (remove true? n)))))&quot;, :offset 328, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (= (every? a true) (filter distinct? n)\n        (not-every? false? a) (remove true? n))))))&quot;, :offset 335, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (= (every? a true)) (filter distinct? n)\n        (not-every? false? a) (remove true? n)))))&quot;, :offset 335, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (= (every? a true)) (distinct n)\n        (not-every? false? a) (remove true? n)))))&quot;, :offset 327, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (not-every? false? a) (remove true? n)))))&quot;, :offset 320, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (some true? a) (filter true? n)))))&quot;, :offset 313, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (some true? a) (remove true? n)))))&quot;, :offset 313, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (some true? n) (remove true? n)))))&quot;, :offset 313, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(true? '(x true))&quot;, :offset 17, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(true? '(true))&quot;, :offset 15, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(true? 'true)&quot;, :offset 13, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (not-every? false? n) (remove true? n)))))&quot;, :offset 320, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (not-every? false? n) (filter true? n)))))&quot;, :offset 320, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (every? = a) (distinct n)\n        (not-every? false? n) b))))&quot;, :offset 305, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        (some true? n) (remove true? n)))))&quot;, :offset 315, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        (distinct? a) (distinct n)\n        (some true? n) (remove true? n)))))&quot;, :offset 350, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)))))&quot;, :offset 352, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) false))))&quot;, :offset 382, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) false\n        (every? true a) false))))&quot;, :offset 412, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x x)))&quot;, :offset 23, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) false\n        (every? true? a) false))))&quot;, :offset 413, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        ;;(every? = a) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 412, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x true true))&quot;, :offset 30, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x y false))&quot;, :offset 28, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x y z))&quot;, :offset 24, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 429, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first (rest n))(first a)) true\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 475, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(rest a)) true \n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 468, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;; (not= (first n)(last )) true\n       ;; (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 468, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;;(not= (first n)(last )) true\n        (not= (first a)(last n)) n\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 465, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;;(not= (first n)(last )) true\n        (not= (first a)(last n)) true\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 468, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)\n        (not-every? true? (every? = a)) (distinct n)\n        ;;(distinct? a) (distinct n)\n        (some true? n) (remove true? n)\n        (some false? n) true\n        (every? true? a) false))))&quot;, :offset 470, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x))&quot;, :offset 20, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 280, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first a)(next a)) true\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 318, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(x nand))&quot;, :offset 20, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(x nand nand))&quot;, :offset 25, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (first (rest n))(first a))true\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 325, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;\\&quot;, :offset 1} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (second n)(first a))true\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 319, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (second n)(second a))true\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 320, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(true? (second '(nand x)))&quot;, :offset 26, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (second n)(second a))true\n        (distinct? rest n) (distinct n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 360, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (second n)a)true\n        (distinct? rest n) (distinct n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 351, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (not= (second n)a)true\n        (distinct? a) (distinct n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 346, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 349, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct n)\n        (not= (second n)(second a))(remove true? n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 401, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct n)\n        (distinct? (second n)(second a))(remove true? n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 406, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (distinct? (second n)(second a))(remove true? n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 421, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (distinct? (second n)(second a))(remove true? n)\n        (false? b) true\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 445, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove false? n))\n        (distinct? (second n)(second a))(remove true? n)\n        (false? b) (remove last n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 457, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (distinct? (second n)(second a))(remove true? n)\n        (false? b) (remove last n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 456, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (some false? a) true\n        (distinct? (second n)(second a))(remove true? n)\n        (false? b) (remove last n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 485, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (some false? a) true\n        (false? b) (remove last n)\n       ;;(not= (first n)(last )) true\n        ;;(not= (first a)(last n)) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 428, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (filter true? n))\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 315, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (filter false? n))\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 316, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (not (filter false? n)))\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 322, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove false? n))\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 316, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(nand true true)&quot;, :offset 16, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(nand '(true true))&quot;, :offset 19, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        ;;(distinct? a) (distinct (remove true? n))\n        (some false? a) true\n        (every? true a) false\n        (= (count a) 1) (false? b)))))&quot;, :offset 347, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (some false? a) true\n        (every? true a) false\n        (= (count a) 1) (false? b)))))&quot;, :offset 345, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        ;;(distinct? a) (distinct (remove true? n))\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 317, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (distinct? a) (distinct (remove true? n))\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 315, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (some false? a) true\n        (= (count a) 1) (false? b)))))&quot;, :offset 265, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (some false? a) true\n        (some true? n)(remove true? n)\n        (= (count a) 1) (false? b)\n        (distinct? (first a)b)(distinct n)))))&quot;, :offset 347, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(defn simplify [n]\n  (let [a (rest (flatten n))]\n    (let [b (last a)]\n      (print n)\n      (print a)\n      (print b)\n      (cond\n        (= (first n)(first a)) b\n        (distinct? (rest n)a)true\n        (some false? a) true\n        (= (count a) 1) (false? b)\n        (distinct? (first a)b)(distinct n)))))&quot;, :offset 308, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand false))&quot;, :offset 24, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand (nand x)))&quot;, :offset 27, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x (nand x)))&quot;, :offset 29, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x x))&quot;, :offset 22, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x y))&quot;, :offset 22, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x true))&quot;, :offset 25, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand x false))&quot;, :offset 26, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand true true))&quot;, :offset 28, :ns &quot;csc344-microproject2.core&quot;} {:command &quot;(simplify '(nand true))&quot;, :offset 23, :ns &quot;csc344-microproject2.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.csc344_microproject2">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="csc344_microproject2" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="csc344_microproject2" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="csc344-microproject2.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="csc344_microproject2" />
      <setting name="path" value="$PROJECT_DIR$/src/csc344_microproject2/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/csc344_microproject2" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.csc344-microproject2.core" />
      <item itemvalue="Clojure REPL.csc344_microproject2" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.csc344-microproject2.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SbtLocalSettings">
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$/../microproject3" value="PREVIEW" />
        <entry key="$PROJECT_DIR$/../microproject3/microproject3" value="PREVIEW" />
        <entry key="$USER_HOME$/microproject3" value="PREVIEW" />
      </map>
    </option>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4df1d3dc-5866-4023-82f3-c36b7ec4ea2b" name="Default Changelist" comment="" />
      <created>1551657737009</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1551657737009</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="65" y="-4" width="1855" height="1084" extended-state="6" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.4212272" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Image Layers" order="3" />
      <window_info id="Capture Tool" order="4" />
      <window_info id="UI Designer" order="5" />
      <window_info id="Learn" order="6" />
      <window_info id="Favorites" order="7" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.39833158" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Version Control" order="7" />
      <window_info active="true" anchor="bottom" id="Terminal" order="8" visible="true" weight="0.33019853" />
      <window_info anchor="bottom" id="Event Log" order="9" side_tool="true" />
      <window_info anchor="bottom" id="Messages" order="10" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="Palette&#9;" order="6" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.49731472" weight="0.16030957" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="REPL" order="9" sideWeight="0.5026853" side_tool="true" visible="true" weight="0.3283582" />
    </layout>
    <layout-to-restore>
      <window_info content_ui="combo" id="Project" order="0" weight="0.4217687" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Image Layers" order="3" />
      <window_info id="Capture Tool" order="4" />
      <window_info id="UI Designer" order="5" />
      <window_info id="Learn" order="6" />
      <window_info id="Favorites" order="7" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.39849624" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Version Control" order="7" />
      <window_info anchor="bottom" id="Terminal" order="8" />
      <window_info anchor="bottom" id="Event Log" order="9" side_tool="true" />
      <window_info anchor="bottom" id="Messages" order="10" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="Palette&#9;" order="6" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.49731472" weight="0.16030957" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info active="true" anchor="right" id="REPL" order="9" sideWeight="0.5026853" side_tool="true" visible="true" weight="0.67346936" />
    </layout-to-restore>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/LICENSE">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/test/csc344_microproject2/core_test.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/csc344_microproject2/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="60">
          <caret line="4" column="21" selection-start-line="4" selection-start-column="21" selection-end-line="4" selection-end-column="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="6" selection-start-line="6" selection-end-line="6" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>scala-sdk-2.12.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>csc344_microproject2</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>IDE SDK</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>